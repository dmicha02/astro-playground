---
import Welcome from '../components/Welcome.astro';
import Layout from '../layouts/Layout.astro';
import Morphing from '../components/Morphing.astro';
import Socials from '../components/Socials.astro';
import Aboutme from '../components/Aboutme.astro';
import InProgress from '../components/InProgress.astro';
---
<!-- 
   ðŸ‘€ HÃ© toi, l'inspecteur du code source ! 
   Tu viens de trouver un petit easter egg ðŸ¥š (1/?)

   Il Ã©tait plutÃ´t simple Ã  trouver, non ?

   Si tu es lÃ  pour regarder comment le site est construit, tout est dispo sur github.
-->
<Layout>
    
    <Morphing />

    <Socials />
    <Welcome />
    <section class="scrolling-section-2 hero overflow-auto" id="about">
      <Aboutme class="about"/>
    </section>
    <section class="scrolling-section hero overflow-auto" id="hero">
        <InProgress/>
    </section>

</Layout>

<script > 
    console.log("%cHello buddy ! Congrats : ðŸ¥š (3/?)","font-size: 25px;color:green");
  
    import { animate, stagger, inView, hover } from "motion";
    const animateElement = (element: Element) => {
  animate(
    element, 
    { opacity: [0, 1], y: [50, 0] }, 
    { ease: [0.39, 0.24, 0.3, 1], duration: 1 }
  );
};

// Set up the observer that will re-run every time the element enters view
inView(".scrolling-section", (element) => {
  animateElement(element);
  
  // Clean up the old observer and create a new one when the animation completes
  return () => {
    // This callback runs when the element leaves the viewport
    // The next time it enters, the animation will run again
  };
}, {
  amount: 0.25,
});


const animateElement2 = (element: Element) => {
animate(
element,
// TODO : fix animation
{ scale: [1, 1.1, 1] ,
  // x: [-300, -100, 0],
  // rotate: [0,180, 360],
  opacity: [1,0,1]
  },
// { opacity: [0, 1], y: [50, 0] }, 
{ ease: "linear", duration: 0.5, },
);

};

let cards = document.getElementsByClassName('card rolling');


inView('div.card.rolling', (element) => {
  ["motion-safe:transition","motion-safe:transition-transform","motion-safe:transition-all","motion-safe:duration-500", ].forEach((className) => {
    element.classList.remove(className);
  });
animateElement2(element);

// Clean up the old observer and create a new one when the animation completes
return () => {
// This callback runs when the element leaves the viewport
// The next time it enters, the animation will run again
};
}, {
amount: 0.20,
});

hover("div.card.rolling", (element) => {
  
  ["motion-safe:transition","motion-safe:transition-transform","motion-safe:transition-all","motion-safe:duration-500"].forEach((className) => {
    element.classList.add(className);
  }); 
  
  return () => {
  }
})
</script>


<style>
  .scrolling-section {
    scroll-margin-top: 70px;
  }

</style>
