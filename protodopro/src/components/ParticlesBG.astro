---
import '../styles/global.css';
import Particles from "astro-particles";
import type { ISourceOptions } from "tsparticles-engine";
const is_dark = Astro.props.is_dark;
//const is_dark = isDark.value;

let bg_color_dark = "#00000000"
let particles_color_dark = "#2f9";

let bg_color_light = "#fff"
let particles_color_light = "#000";

const options: ISourceOptions = {
    background: {
        color: is_dark ? bg_color_dark : bg_color_light,
        opacity: 0
    },
    fullScreen: {
        zIndex: -1
    },
"particles": {
    "number": {
      "value": 160,
      "density": {
        "enable": true,
        "value_area": 800
      }
    },
    "color": {
      "value": is_dark? particles_color_dark : particles_color_light
    },
    "shape": {
      "type": "circle",
      "stroke": {
        "width": 0,
        "color": is_dark ? bg_color_dark : particles_color_light
      },
      "polygon": {
        "nb_sides": 5
      },
      "image": {
        "src": "img/github.svg",
        "width": 100,
        "height": 100
      }
    },
    "opacity": {
      "value": 1,
      "random": true,
      "anim": {
        "enable": true,
        "speed": 1,
        "opacity_min": 0,
        "sync": false
      }
    },
    "size": {
      "value": 3,
      "random": true,
      "anim": {
        "enable": false,
        "speed": 4,
        "size_min": 0.3,
        "sync": false
      }
    },
    "line_linked": {
      "enable": false,
      "distance": 150,
      "color": is_dark ? particles_color_dark : particles_color_light,
      "opacity": 0.4,
      "width": 1
    },
    "move": {
      "enable": true,
      "speed": 1,
      "direction": "none",
      "random": true,
      "straight": false,
      "out_mode": "out",
      "bounce": false,
      "attract": {
        "enable": false,
        "rotateX": 600,
        "rotateY": 600
      }
    }
  },
  "interactivity": {
    "detect_on": "window",
    "events": {
      "onhover": {
        "enable": true,
        "mode": "bubble"
      },
      "onclick": {
        "enable": true,
        "mode": "repulse"
      },
      "resize": true
    },
    "modes": {
      "grab": {
        "distance": 400,
        "line_linked": {
          "opacity": 1
        }
      },
      "bubble": {
        "distance": 250,
        "size": 0,
        "duration": 2,
        "opacity": 0,
        "speed": 3
      },
      "repulse": {
        "distance": 400,
        "duration": 0.4
      },
      "push": {
        "particles_nb": 4
      },
      "remove": {
        "particles_nb": 2
      }
    }
  },
};
---

<script>
    import { type Container, type Engine, tsParticles } from "tsparticles-engine";

    // Extend the Window interface to include particlesInit and particlesLoaded
    declare global {
        interface Window {
            particlesInit: (engine: Engine) => Promise<void>;
            particlesLoaded?: (container: Container) => void;
        }
    }
    import { loadFull } from "tsparticles";

    // the function name is the parameter passed to the init attribute
    // required
    window.particlesInit = async function (engine: Engine) {
        await loadFull(engine);
    }
    
    // the function name is the parameter passed to the loaded attribute
    // optional
    window.particlesLoaded = function (container: Container) {
        console.log("particlesLoaded callback");
    }

</script>


<Particles id="tsparticles" options={options} init="particlesInit" />